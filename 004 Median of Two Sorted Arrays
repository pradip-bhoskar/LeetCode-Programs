G\iven two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106


____________________________________
//solution:

var findMedianSortedArrays = function(nums1, nums2) {
    const length = nums1.length + nums2.length
    const arr = []
    
    let index1 = 0
    let index2 = 0
    
    const limit = length % 2 === 0 ?length/2 + 1 : Math.ceil(length/2)
    
    while (arr.length !== limit) {
        if (nums1[index1] === undefined || nums1[index1] >= nums2[index2]) {
            arr.push(nums2[index2])
            index2++
        }
        else if (nums2[index2] === undefined || nums1[index1] < nums2[index2]) {
            arr.push(nums1[index1])
            index1++
        }
    }
    
    if (length % 2 === 0) {
        return (arr[arr.length - 2] + arr[arr.length - 1])/2
    }
    return arr[arr.length - 1]
};0aaa0
